name: validate
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install yq (for YAML processing)
      - name: Install yq
        run: |
          YQ_VERSION=v4.44.3
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
          yq --version

      # Collect & sanitize manifests:
      #  - exclude .git/ and build/
      #  - split multi-doc YAMLs
      #  - keep only docs that have apiVersion+kind
      #  - drop the .sops key so kubeconform won't error
      - name: Collect & sanitize manifests
        run: |
          set -euo pipefail
          mkdir -p build
      
          # Build a null-delimited array of YAML files (exclude .git/ and build/)
          mapfile -d '' files < <(find . -type f \( -name '*.yaml' -o -name '*.yml' \) \
                                    -not -path './.git/*' -not -path './build/*' -print0)
      
          if [ ${#files[@]} -eq 0 ]; then
            echo "No YAMLs found"
            exit 1
          fi
      
          # Use yq to evaluate ALL documents from ALL files:
          #  - keep only mapping docs
          #  - keep only docs that have apiVersion AND kind
          #  - drop the .sops key (SOPS metadata isn't part of K8s schema)
          yq ea '
            select(type == "!!map") |
            select(has("apiVersion") and has("kind")) |
            del(.sops)
          ' "${files[@]}" > build/manifests.sanitized.yaml
      
          if [ ! -s build/manifests.sanitized.yaml ]; then
            echo "No Kubernetes manifests found after sanitation."
            # Optional: comment this out to allow empty runs without failing CI
            exit 1
          fi
      
          echo "Sanitized manifest line count:"
          wc -l build/manifests.sanitized.yaml


      # kubeconform: fast schema validation (supports CRDs)
      - name: Setup kubeconform
        uses: bmuschko/setup-kubeconform@v1
      - name: Run kubeconform
        run: |
          kubeconform \
            -strict \
            -ignore-missing-schemas \
            -summary \
            -output json \
            build/manifests.sanitized.yaml

      # Kubesec: risk analysis + upload to Security tab
      - name: Kubesec scan
        uses: controlplaneio/kubesec-action@43d0ddff5ffee89a6bb9f29b64cd865411137b14
        with:
          input: build/manifests.sanitized.yaml
          format: template
          template: template/sarif.tpl
          output: kubesec-results.sarif
          exit-code: "0"

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kubesec-results.sarif
